{"version":3,"sources":["assets/Script/Animation/AnimationManager.ts","assets/Script/Boosters/BoosterSystem.ts","assets/Script/Core/BoosterTypes.ts","assets/Script/Boosters/BoosterUI.ts","assets/Script/Core/EventSystem.ts","assets/Script/Field/GameField.ts","assets/Script/Core/GameManager.ts","assets/Script/Core/GameState.ts","assets/Script/UI/GameUIManager.ts","assets/Script/Utils/PositionUtils.ts","assets/Script/Utils/TileAreaUtils.ts","assets/Script/Field/TileContainer.ts","assets/Script/Tiles/TileFactory.ts","assets/Script/Tiles/Tile.ts","assets/Script/Utils/WorldPositionUtils.ts"],"names":["_a","cc","_decorator","ccclass","EventSystem_1","property","require","WorldPositionUtils_1","AnimationManager","_super","__extends","prototype","onLoad","this","eventSystem","EventSystem","getInstance","setupEventListeners","on","Events","TILES_BURNED","onTilesBurned","bind","TILES_FELL","onTilesFell","ANIMATION_COMPLETED","onAnimationCompleted","data","animateTileDestruction","animateTileFall","type","positions","emit","TILES_DESTROYED","_this","completedAnimations","totalAnimations","length","_loop_1","pos","tileNode","this_1","getTileNodeAt","tween_1","tween","to","opacity","scale","call","start","stopTween","stop","_i","positions_1","_loop_2","this_2","targetPos","getWorldPosition","tween_2","position","v3","x","y","positions_2","animateNewTilesCreation","_loop_3","i","this_3","targetWorldPos","startY","tween_3","tileContainer","find","children","children_1","child","tileComponent","getComponent","WorldPositionUtils","onDestroy","off","__decorate","Component","exports","BoosterTypes_1","TileAreaUtils_1","BoosterSystem","apply","arguments","boosterState","bomb","teleport","activation","BoosterType","BOMB","isActive","selectedTiles","TILE_CLICKED","handleTileClick","activateBooster","canActivateBooster","deactivateBooster","BOOSTER_ACTIVATED","instruction","getBoosterInstruction","TELEPORT","handleBombClick","handleTeleportClick","tilesToDestroy","getTilesInRadius","BOOSTER_BOMB_EXECUTE","center","consumeBooster","GROUP_BURNED_SUCCESSFULLY","push","TELEPORT_FIRST_TILE_SELECTED","tile1","tile2","BOOSTER_TELEPORT_EXECUTE","position1","position2","radius","TileAreaUtils","BOOSTER_UI_UPDATE","BOOSTER_DEACTIVATED","getBoosterCount","isBoosterActive","getActiveBoosterType","resetBoosters","BoosterState","BoosterSystem_1","BoosterUI","bombCountLabel","teleportCountLabel","bombButton","teleportButton","boosterSystem","setupButtons","updateUI","onUIUpdate","onBoosterActivated","onBoosterDeactivated","node","Node","EventType","TOUCH_END","onBombButtonClicked","onTeleportButtonClicked","showBoosterActivationEffect","hideBoosterActivationEffect","bombCount","string","toString","teleportCount","updateButtonStates","updateBombButtonState","updateTeleportButtonState","isAvailable","interactable","updateButtonVisual","button","targetButton","repeatForever","Tween","stopAllByTarget","Label","Button","events","Map","instance","clear","event","callback","has","set","get","callbacks","index","indexOf","splice","forEach","GAME_STATE_CHANGED","SCORE_CHANGED","MOVES_CHANGED","GAME_WON","GAME_LOST","BOOSTER_USED","BOOSTER_BUTTON_CLICKED","BOOSTER_TARGET_SELECTED","TILES_SWAPPED","UI_UPDATE_REQUESTED","PositionUtils_1","GameField","tilePrefab","initializeField","config","createField","field","fieldWidth","fieldHeight","getTileAt","isValidPosition","setTileAt","tile","removeTileAt","PositionUtils","getWorldPositionForField","getAllPositions","Prefab","GameState_1","TileContainer_1","GameManager","gameField","tileContainerComponent","currentState","GameState","MENU","setupConfig","setupStats","startNewGame","targetScore","maxMoves","shuffleAttempts","stats","score","moves","Math","max","shufflesLeft","isGameOver","isWin","boundOnTileClicked","onTileClicked","boundOnTilesBurned","boundOnGroupBurnedSuccessfully","onGroupBurnedSuccessfully","setGameState","PLAYING","initializeContainer","newState","points","checkGameEnd","endGame","handleNoMovesLeft","scheduleOnce","shuffleField","restartGame","refreshEntireField","getCurrentState","getStats","__assign","getConfig","TileContainer","TileType","TileState","GameUIManager","scoreLabel","movesLabel","winLoseLabel","hideWinLoseMessage","onScoreChanged","onMovesChanged","onGameWon","onGameLost","onUIUpdateRequested","undefined","updateScoreDisplay","updateMovesDisplay","showWinMessage","showLoseMessage","color","Color","GREEN","animateWinLoseMessage","RED","active","FIELD_WIDTH","FIELD_HEIGHT","isValidPositionXY","arePositionsEqual","pos1","pos2","getDistance","dx","dy","sqrt","tiles","getTilesInRow","row","getTilesInColumn","column","mergeTilePositions","tiles1","tiles2","merged","__spreadArrays","existingPositions","Set","map","tiles2_1","key","add","containsPosition","target","some","TileFactory_1","Tile_1","wasSuperTileActivation","boundOnBombExecute","onBombExecute","boundOnTeleportExecute","onTeleportExecute","boundOnTilesDestroyed","onTilesDestroyed","clearAllTiles","createTileGrid","generateInitialTiles","removeAllChildren","destroyTile","createTileAt","tileConfig","TileFactory","createRandomTile","instantiate","Tile","initialize","setParent","worldPos","setPosition","canBeClicked","isSuperTile","activateSuperTile","findAndBurnGroup","clickedTile","group","findConnectedTiles","burnTiles","startPosition","tileType","visited","result","floodFill","directions_1","dir","newPos","destroyTilesAfterAnimation","setState","BURNING","createSuperTile","processGravity","applyGravity","fillEmptySpaces","processColumn","columnTiles","newY","newPosition","emptyPositions","groupSize","superTileType","getSuperTileType","BLUE","isSpecial","specialType","SUPER_BOMB_MAX","SUPER_BOMB","random","SUPER_ROW","SUPER_COLUMN","state","rowTiles","centerX","centerY","swapTiles","tile1Type","tile2Type","updateVisual","unscheduleAllCallbacks","getRandomTileType","createTileOfType","randomIndex","floor","tileTypes","getAllTileTypes","YELLOW","PURPLE","sprite","tileSprites","NORMAL","setupButton","setContentSize","spriteIndex","getSpriteIndex","spriteFrame","destroy","Sprite","SpriteFrame","startX","SPACING","v2","TILE_SIZE"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\nimport { EventSystem, Events } from \"../Core/EventSystem\";\r\nimport { Position } from \"../Core/GameState\";\r\nimport { WorldPositionUtils } from \"../Utils/WorldPositionUtils\";\r\n\r\n@ccclass\r\nexport class AnimationManager extends cc.Component {\r\n    private eventSystem!: EventSystem;\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        this.eventSystem.on(Events.TILES_BURNED, this.onTilesBurned.bind(this));\r\n        this.eventSystem.on(Events.TILES_FELL, this.onTilesFell.bind(this));\r\n        this.eventSystem.on(Events.ANIMATION_COMPLETED, this.onAnimationCompleted.bind(this));\r\n    }\r\n\r\n    private onTilesBurned(data?: Position[]): void {\r\n        if (!data) return;\r\n        this.animateTileDestruction(data);\r\n    }\r\n\r\n    private onTilesFell(data?: Position[]): void {\r\n        if (!data) return;\r\n        this.animateTileFall(data);\r\n    }\r\n\r\n    private onAnimationCompleted(data?: { type?: string; positions?: Position[] }): void {\r\n        if (!data) return;\r\n        if (data.type === 'destruction' && data.positions) {\r\n            this.eventSystem.emit(Events.TILES_DESTROYED, data.positions);\r\n        }\r\n    }\r\n\r\n    public animateTileDestruction(positions: Position[]): void {\r\n        let completedAnimations = 0;\r\n        const totalAnimations = positions.length;\r\n        \r\n        for (const pos of positions) {\r\n            const tileNode = this.getTileNodeAt(pos);\r\n            if (tileNode) {\r\n                const tween = cc.tween(tileNode)\r\n                    .to(0.3, { opacity: 0, scale: 0 })\r\n                    .call(() => {\r\n                        completedAnimations++;\r\n                        if (completedAnimations >= totalAnimations) {\r\n                            this.eventSystem.emit(Events.ANIMATION_COMPLETED, { type: 'destruction', positions });\r\n                        }\r\n                    })\r\n                    .start();\r\n                \r\n                const stopTween = () => {\r\n                    if (tween) {\r\n                        tween.stop();\r\n                    }\r\n                };\r\n                \r\n                tileNode.on('destroy', stopTween);\r\n                tileNode.on('remove', stopTween);\r\n            } else {\r\n                completedAnimations++;\r\n                if (completedAnimations >= totalAnimations) {\r\n                    this.eventSystem.emit(Events.ANIMATION_COMPLETED, { type: 'destruction', positions });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public animateTileFall(positions: Position[]): void {\r\n        for (const pos of positions) {\r\n            const tileNode = this.getTileNodeAt(pos);\r\n            if (tileNode) {\r\n                const targetPos = this.getWorldPosition(pos);\r\n                const tween = cc.tween(tileNode)\r\n                    .to(0.15, { position: cc.v3(targetPos.x, targetPos.y, 0) })\r\n                    .start();\r\n                \r\n                const stopTween = () => {\r\n                    if (tween) {\r\n                        tween.stop();\r\n                    }\r\n                };\r\n                \r\n                tileNode.on('destroy', stopTween);\r\n                tileNode.on('remove', stopTween);\r\n            }\r\n        }\r\n    }\r\n\r\n    public animateNewTilesCreation(positions: Position[]): void {\r\n        for (let i = 0; i < positions.length; i++) {\r\n            const pos = positions[i];\r\n            const tileNode = this.getTileNodeAt(pos);\r\n            \r\n            if (tileNode) {\r\n                const targetWorldPos = this.getWorldPosition(pos);\r\n                const startY = targetWorldPos.y + 200;\r\n                tileNode.y = startY;\r\n                \r\n                const tween = cc.tween(tileNode)\r\n                    .to(0.2, { position: cc.v3(targetWorldPos.x, targetWorldPos.y, 0) })\r\n                    .start();\r\n                \r\n                const stopTween = () => {\r\n                    if (tween) {\r\n                        tween.stop();\r\n                    }\r\n                };\r\n                \r\n                tileNode.on('destroy', stopTween);\r\n                tileNode.on('remove', stopTween);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getTileNodeAt(position: Position): cc.Node | null {\r\n        const tileContainer = cc.find(\"Canvas/HUD/GameField/TileContainer\");\r\n        if (tileContainer && tileContainer.children) {\r\n            const children = tileContainer.children;\r\n            for (const child of children) {\r\n                const tileComponent = child.getComponent(\"Tile\");\r\n                if (tileComponent && tileComponent.position && \r\n                    tileComponent.position.x === position.x && \r\n                    tileComponent.position.y === position.y) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getWorldPosition(position: Position): cc.Vec2 {\r\n        return WorldPositionUtils.getWorldPosition(position);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.eventSystem.off(Events.TILES_BURNED, this.onTilesBurned.bind(this));\r\n        this.eventSystem.off(Events.TILES_FELL, this.onTilesFell.bind(this));\r\n    }\r\n}\r\n","/**\r\n * Единая система бустеров - упрощенная версия по образцу рабочего примера\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nimport { BoosterType, BoosterState } from \"../Core/BoosterTypes\";\r\nimport { Position } from \"../Core/GameState\";\r\nimport { EventSystem, Events } from \"../Core/EventSystem\";\r\nimport { TileAreaUtils } from \"../Utils/TileAreaUtils\";\r\n\r\ninterface BoosterActivation {\r\n    type: BoosterType;\r\n    isActive: boolean;\r\n    selectedTiles: Position[];\r\n}\r\n\r\n@ccclass\r\nexport class BoosterSystem extends cc.Component {\r\n    private eventSystem!: EventSystem;\r\n    \r\n    private boosterState = {\r\n        bomb: 3,\r\n        teleport: 5\r\n    };\r\n    \r\n    private activation: BoosterActivation = {\r\n        type: BoosterType.BOMB,\r\n        isActive: false,\r\n        selectedTiles: []\r\n    };\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        this.eventSystem.on(Events.TILE_CLICKED, this.handleTileClick.bind(this));\r\n    }\r\n\r\n    public activateBooster(type: BoosterType): void {\r\n        if (!this.canActivateBooster(type)) {\r\n            return;\r\n        }\r\n        \r\n        if (this.activation.isActive) {\r\n            this.deactivateBooster();\r\n        }\r\n        this.activation = {\r\n            type,\r\n            isActive: true,\r\n            selectedTiles: []\r\n        };\r\n        this.eventSystem.emit(Events.BOOSTER_ACTIVATED, {\r\n            type,\r\n            instruction: this.getBoosterInstruction(type)\r\n        });\r\n    }\r\n\r\n    private canActivateBooster(type: BoosterType): boolean {\r\n        switch (type) {\r\n            case BoosterType.BOMB:\r\n                return this.boosterState.bomb > 0;\r\n            case BoosterType.TELEPORT:\r\n                return this.boosterState.teleport > 0;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private handleTileClick(data?: Position): void {\r\n        if (!data) return;\r\n        const position = data;\r\n        if (!this.activation.isActive) {\r\n            return;\r\n        }\r\n        \r\n        switch (this.activation.type) {\r\n            case BoosterType.BOMB:\r\n                this.handleBombClick(position);\r\n                break;\r\n            case BoosterType.TELEPORT:\r\n                this.handleTeleportClick(position);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private handleBombClick(position: Position): void {\r\n        const tilesToDestroy = this.getTilesInRadius(position, 1);\r\n        \r\n        if (tilesToDestroy.length > 0) {\r\n            this.eventSystem.emit(Events.BOOSTER_BOMB_EXECUTE, {\r\n                positions: tilesToDestroy,\r\n                center: position\r\n            });\r\n            \r\n            this.consumeBooster(BoosterType.BOMB);\r\n            this.deactivateBooster();\r\n            this.eventSystem.emit(Events.GROUP_BURNED_SUCCESSFULLY);\r\n        }\r\n    }\r\n\r\n    private handleTeleportClick(position: Position): void {\r\n        this.activation.selectedTiles.push(position);\r\n        if (this.activation.selectedTiles.length === 1) {\r\n            this.eventSystem.emit(Events.TELEPORT_FIRST_TILE_SELECTED, { position });\r\n        } else if (this.activation.selectedTiles.length === 2) {\r\n            const [tile1, tile2] = this.activation.selectedTiles;\r\n            \r\n            this.eventSystem.emit(Events.BOOSTER_TELEPORT_EXECUTE, {\r\n                position1: tile1,\r\n                position2: tile2\r\n            });\r\n            \r\n            this.consumeBooster(BoosterType.TELEPORT);\r\n            this.deactivateBooster();\r\n            this.eventSystem.emit(Events.GROUP_BURNED_SUCCESSFULLY);\r\n        }\r\n    }\r\n\r\n    private getTilesInRadius(center: Position, radius: number): Position[] {\r\n        return TileAreaUtils.getTilesInRadius(center, radius);\r\n    }\r\n\r\n    private consumeBooster(type: BoosterType): void {\r\n        switch (type) {\r\n            case BoosterType.BOMB:\r\n                if (this.boosterState.bomb > 0) {\r\n                    this.boosterState.bomb--;\r\n                }\r\n                break;\r\n            case BoosterType.TELEPORT:\r\n                if (this.boosterState.teleport > 0) {\r\n                    this.boosterState.teleport--;\r\n                }\r\n                break;\r\n        }\r\n        \r\n        this.eventSystem.emit(Events.BOOSTER_UI_UPDATE, this.boosterState);\r\n    }\r\n\r\n    private deactivateBooster(): void {\r\n        if (this.activation.isActive) {\r\n            this.activation = {\r\n                type: BoosterType.BOMB,\r\n                isActive: false,\r\n                selectedTiles: []\r\n            };\r\n            this.eventSystem.emit(Events.BOOSTER_DEACTIVATED, {\r\n                type: this.activation.type\r\n            });\r\n        }\r\n    }\r\n\r\n    private getBoosterInstruction(type: BoosterType): string {\r\n        switch (type) {\r\n            case BoosterType.BOMB:\r\n                return 'Выберите тайл для взрыва (3x3 область)';\r\n            case BoosterType.TELEPORT:\r\n                return 'Выберите два тайла для обмена местами';\r\n            default:\r\n                return 'Неизвестный бустер';\r\n        }\r\n    }\r\n\r\n    public getBoosterCount(type: BoosterType): number {\r\n        switch (type) {\r\n            case BoosterType.BOMB:\r\n                return this.boosterState.bomb;\r\n            case BoosterType.TELEPORT:\r\n                return this.boosterState.teleport;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public isBoosterActive(): boolean {\r\n        return this.activation.isActive;\r\n    }\r\n\r\n    public getActiveBoosterType(): BoosterType | null {\r\n        return this.activation.isActive ? this.activation.type : null;\r\n    }\r\n\r\n    public resetBoosters(): void {\r\n        this.boosterState = {\r\n            bomb: 3,\r\n            teleport: 5\r\n        };\r\n        \r\n        if (this.activation.isActive) {\r\n            this.deactivateBooster();\r\n        }\r\n        this.eventSystem.emit(Events.BOOSTER_UI_UPDATE, this.boosterState);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.eventSystem.off(Events.TILE_CLICKED, this.handleTileClick.bind(this));\r\n    }\r\n}\r\n","/**\r\n * Типы и интерфейсы для системы бустеров\r\n */\r\n\r\nimport { Position } from \"./GameState\";\r\n\r\nexport enum BoosterType {\r\n    BOMB = \"bomb\",\r\n    TELEPORT = \"teleport\"\r\n}\r\n\r\nexport enum BoosterState {\r\n    INACTIVE = \"inactive\",\r\n    ACTIVE = \"active\",\r\n    WAITING_TARGET = \"waiting_target\"\r\n}\r\n\r\nexport interface BoosterConfig {\r\n    type: BoosterType;\r\n    maxUses: number;\r\n    currentUses: number;\r\n    isUnlocked: boolean;\r\n    radius?: number;\r\n}\r\n\r\nexport interface BoosterData {\r\n    bomb: BoosterConfig;\r\n    teleport: BoosterConfig;\r\n}\r\n\r\n","/**\r\n * UI управление бустерами - обновление счетчиков и состояний кнопок\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nimport { BoosterType, BoosterState } from \"../Core/BoosterTypes\";\r\nimport { EventSystem, Events } from \"../Core/EventSystem\";\r\nimport { BoosterSystem } from \"./BoosterSystem\";\r\n\r\n@ccclass\r\nexport class BoosterUI extends cc.Component {\r\n    @property(cc.Label)\r\n    bombCountLabel: cc.Label = null!;\r\n\r\n    @property(cc.Label)\r\n    teleportCountLabel: cc.Label = null!;\r\n\r\n    @property(cc.Button)\r\n    bombButton: cc.Button = null!;\r\n\r\n    @property(cc.Button)\r\n    teleportButton: cc.Button = null!;\r\n\r\n    @property(BoosterSystem)\r\n    boosterSystem: BoosterSystem = null!;\r\n\r\n    private eventSystem!: EventSystem;\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n        this.setupEventListeners();\r\n        this.setupButtons();\r\n        this.updateUI();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        this.eventSystem.on(Events.BOOSTER_UI_UPDATE, this.onUIUpdate.bind(this));\r\n        this.eventSystem.on(Events.BOOSTER_ACTIVATED, this.onBoosterActivated.bind(this));\r\n        this.eventSystem.on(Events.BOOSTER_DEACTIVATED, this.onBoosterDeactivated.bind(this));\r\n    }\r\n\r\n    private setupButtons(): void {\r\n        if (this.bombButton) {\r\n            this.bombButton.node.on(cc.Node.EventType.TOUCH_END, this.onBombButtonClicked.bind(this));\r\n        }\r\n\r\n        if (this.teleportButton) {\r\n            this.teleportButton.node.on(cc.Node.EventType.TOUCH_END, this.onTeleportButtonClicked.bind(this));\r\n        }\r\n    }\r\n\r\n    private onBombButtonClicked(): void {\r\n        if (this.boosterSystem) {\r\n            this.boosterSystem.activateBooster(BoosterType.BOMB);\r\n        }\r\n    }\r\n\r\n    private onTeleportButtonClicked(): void {\r\n        if (this.boosterSystem) {\r\n            this.boosterSystem.activateBooster(BoosterType.TELEPORT);\r\n        }\r\n    }\r\n\r\n    private onUIUpdate(data?: BoosterState): void {\r\n        this.updateUI();\r\n    }\r\n\r\n    private onBoosterActivated(data?: { type?: BoosterType }): void {\r\n        this.updateUI();\r\n        this.showBoosterActivationEffect(data?.type);\r\n    }\r\n\r\n    private onBoosterDeactivated(data?: { type?: BoosterType }): void {\r\n        this.updateUI();\r\n        this.hideBoosterActivationEffect();\r\n    }\r\n\r\n    private updateUI(): void {\r\n        if (!this.boosterSystem) return;\r\n        \r\n        if (this.bombCountLabel) {\r\n            const bombCount = this.boosterSystem.getBoosterCount(BoosterType.BOMB);\r\n            this.bombCountLabel.string = bombCount.toString();\r\n        }\r\n        \r\n        if (this.teleportCountLabel) {\r\n            const teleportCount = this.boosterSystem.getBoosterCount(BoosterType.TELEPORT);\r\n            this.teleportCountLabel.string = teleportCount.toString();\r\n        }\r\n        \r\n        this.updateButtonStates();\r\n    }\r\n\r\n    private updateButtonStates(): void {\r\n        this.updateBombButtonState();\r\n        this.updateTeleportButtonState();\r\n    }\r\n\r\n    private updateBombButtonState(): void {\r\n        if (!this.bombButton || !this.boosterSystem) return;\r\n\r\n        const bombCount = this.boosterSystem.getBoosterCount(BoosterType.BOMB);\r\n        const isAvailable = bombCount > 0;\r\n        \r\n        this.bombButton.interactable = isAvailable;\r\n        this.updateButtonVisual(this.bombButton, isAvailable);\r\n    }\r\n\r\n    private updateTeleportButtonState(): void {\r\n        if (!this.teleportButton || !this.boosterSystem) return;\r\n\r\n        const teleportCount = this.boosterSystem.getBoosterCount(BoosterType.TELEPORT);\r\n        const isAvailable = teleportCount > 0;\r\n        \r\n        this.teleportButton.interactable = isAvailable;\r\n        this.updateButtonVisual(this.teleportButton, isAvailable);\r\n    }\r\n\r\n    private updateButtonVisual(button: cc.Button, isAvailable: boolean): void {\r\n        if (!button || !button.node) return;\r\n\r\n        const opacity = isAvailable ? 255 : 128;\r\n        button.node.opacity = opacity;\r\n    }\r\n\r\n    private showBoosterActivationEffect(type?: BoosterType): void {\r\n        if (!type) return;\r\n\r\n        let targetButton: cc.Button | null = null;\r\n        \r\n        if (type === BoosterType.BOMB && this.bombButton) {\r\n            targetButton = this.bombButton;\r\n        } else if (type === BoosterType.TELEPORT && this.teleportButton) {\r\n            targetButton = this.teleportButton;\r\n        }\r\n\r\n        if (targetButton && targetButton.node) {\r\n            cc.tween(targetButton.node)\r\n                .repeatForever(\r\n                    cc.tween()\r\n                        .to(0.5, { scale: 1.1 })\r\n                        .to(0.5, { scale: 1.0 })\r\n                )\r\n                .start();\r\n        }\r\n    }\r\n\r\n    private hideBoosterActivationEffect(): void {\r\n        if (this.bombButton && this.bombButton.node) {\r\n            cc.Tween.stopAllByTarget(this.bombButton.node);\r\n            this.bombButton.node.scale = 1.0;\r\n        }\r\n        \r\n        if (this.teleportButton && this.teleportButton.node) {\r\n            cc.Tween.stopAllByTarget(this.teleportButton.node);\r\n            this.teleportButton.node.scale = 1.0;\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        this.eventSystem.off(Events.BOOSTER_UI_UPDATE, this.onUIUpdate.bind(this));\r\n        this.eventSystem.off(Events.BOOSTER_ACTIVATED, this.onBoosterActivated.bind(this));\r\n        this.eventSystem.off(Events.BOOSTER_DEACTIVATED, this.onBoosterDeactivated.bind(this));\r\n    }\r\n}\r\n\r\n","/**\r\n * Система событий для связи между компонентами\r\n */\r\n\r\nimport { GameState, Position } from \"./GameState\";\r\n\r\nexport interface EventCallback<T = any> {\r\n    (data?: T): void;\r\n}\r\n\r\nexport interface EventListener {\r\n    event: string;\r\n    callback: EventCallback;\r\n}\r\n\r\nexport class EventSystem {\r\n    private static instance: EventSystem;\r\n    private events: Map<string, EventCallback[]> = new Map();\r\n\r\n    static getInstance(): EventSystem {\r\n        if (!EventSystem.instance) {\r\n            EventSystem.instance = new EventSystem();\r\n        }\r\n        return EventSystem.instance;\r\n    }\r\n\r\n    clear(): void {\r\n        this.events.clear();\r\n    }\r\n\r\n    on<T = any>(event: string, callback: EventCallback<T>): void {\r\n        if (!this.events.has(event)) {\r\n            this.events.set(event, []);\r\n        }\r\n        this.events.get(event)!.push(callback);\r\n    }\r\n\r\n    off<T = any>(event: string, callback: EventCallback<T>): void {\r\n        const callbacks = this.events.get(event);\r\n        if (callbacks) {\r\n            const index = callbacks.indexOf(callback);\r\n            if (index > -1) {\r\n                callbacks.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    emit<T = any>(event: string, data?: T): void {\r\n        const callbacks = this.events.get(event);\r\n        if (callbacks) {\r\n            callbacks.forEach(callback => callback(data));\r\n        }\r\n    }\r\n}\r\n\r\nexport const Events = {\r\n    GAME_STATE_CHANGED: \"game_state_changed\",\r\n    TILE_CLICKED: \"tile_clicked\",\r\n    TILES_BURNED: \"tiles_burned\",\r\n    TILES_FELL: \"tiles_fell\",\r\n    SCORE_CHANGED: \"score_changed\",\r\n    MOVES_CHANGED: \"moves_changed\",\r\n    GAME_WON: \"game_won\",\r\n    GAME_LOST: \"game_lost\",\r\n    BOOSTER_ACTIVATED: \"booster_activated\",\r\n    BOOSTER_DEACTIVATED: \"booster_deactivated\",\r\n    BOOSTER_USED: \"booster_used\",\r\n    BOOSTER_BUTTON_CLICKED: \"booster_button_clicked\",\r\n    BOOSTER_TARGET_SELECTED: \"booster_target_selected\",\r\n    BOOSTER_UI_UPDATE: \"booster_ui_update\",\r\n    BOOSTER_BOMB_EXECUTE: \"booster_bomb_execute\",\r\n    BOOSTER_TELEPORT_EXECUTE: \"booster_teleport_execute\",\r\n    TELEPORT_FIRST_TILE_SELECTED: \"teleport_first_tile_selected\",\r\n    TILES_SWAPPED: \"tiles_swapped\",\r\n    ANIMATION_COMPLETED: \"animation_completed\",\r\n    UI_UPDATE_REQUESTED: \"ui_update_requested\",\r\n    TILES_DESTROYED: \"tiles_destroyed\",\r\n    GROUP_BURNED_SUCCESSFULLY: \"group_burned_successfully\"\r\n};\r\n","/**\r\n * Управление игровым полем и позиционированием тайлов\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nimport { GameConfig, Position } from \"../Core/GameState\";\r\nimport { EventSystem, Events } from \"../Core/EventSystem\";\r\nimport { PositionUtils } from \"../Utils/PositionUtils\";\r\nimport { WorldPositionUtils } from \"../Utils/WorldPositionUtils\";\r\n\r\n@ccclass\r\nexport class GameField extends cc.Component {\r\n    @property(cc.Node)\r\n    tileContainer: cc.Node = null!;\r\n\r\n    @property(cc.Prefab)\r\n    tilePrefab: cc.Prefab = null!;\r\n\r\n    private config!: GameConfig;\r\n    private field!: cc.Node[][];\r\n    private eventSystem!: EventSystem;\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n    }\r\n\r\n    public initializeField(config: GameConfig): void {\r\n        this.config = config;\r\n        this.createField();\r\n    }\r\n\r\n    private createField(): void {\r\n        this.field = [];\r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            this.field[x] = [];\r\n            for (let y = 0; y < this.config.fieldHeight; y++) {\r\n                this.field[x][y] = null!;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTileAt(position: Position): cc.Node | null {\r\n        if (this.isValidPosition(position)) {\r\n            return this.field[position.x][position.y];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public setTileAt(position: Position, tile: cc.Node): void {\r\n        if (this.isValidPosition(position)) {\r\n            this.field[position.x][position.y] = tile;\r\n        }\r\n    }\r\n\r\n    public removeTileAt(position: Position): void {\r\n        if (this.isValidPosition(position)) {\r\n            this.field[position.x][position.y] = null!;\r\n        }\r\n    }\r\n\r\n    public isValidPosition(position: Position): boolean {\r\n        return PositionUtils.isValidPosition(position);\r\n    }\r\n\r\n    public getWorldPosition(position: Position): cc.Vec2 {\r\n        return WorldPositionUtils.getWorldPositionForField(position);\r\n    }\r\n\r\n    public getAllPositions(): Position[] {\r\n        const positions: Position[] = [];\r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            for (let y = 0; y < this.config.fieldHeight; y++) {\r\n                positions.push({ x, y });\r\n            }\r\n        }\r\n        return positions;\r\n    }\r\n}\r\n","/**\r\n * Основной контроллер игры - управляет состоянием и логикой\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nimport { GameState, GameConfig, GameStats, Position } from \"./GameState\";\r\nimport { EventSystem, Events } from \"./EventSystem\";\r\nimport { TileContainer } from \"../Field/TileContainer\";\r\nimport { BoosterSystem } from \"../Boosters/BoosterSystem\";\r\n\r\n@ccclass\r\nexport class GameManager extends cc.Component {\r\n    @property(cc.Node)\r\n    gameField: cc.Node = null!;\r\n\r\n    @property(cc.Node)\r\n    tileContainer: cc.Node = null!;\r\n\r\n    @property(TileContainer)\r\n    tileContainerComponent: TileContainer = null!;\r\n\r\n    @property(BoosterSystem)\r\n    boosterSystem: BoosterSystem = null!;\r\n\r\n\r\n    private currentState: GameState = GameState.MENU;\r\n    private config!: GameConfig;\r\n    private stats!: GameStats;\r\n    private eventSystem!: EventSystem;\r\n    \r\n    private boundOnTileClicked!: (data?: Position) => void;\r\n    private boundOnTilesBurned!: (data?: Position[]) => void;\r\n    private boundOnGroupBurnedSuccessfully!: (data?: void) => void;\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n        this.setupConfig();\r\n        this.setupStats();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    start() {\r\n        this.startNewGame();\r\n    }\r\n\r\n    private setupConfig(): void {\r\n        this.config = {\r\n            fieldWidth: 8,\r\n            fieldHeight: 8,\r\n            targetScore: 1500,\r\n            maxMoves: 25,\r\n            shuffleAttempts: 2\r\n        };\r\n    }\r\n\r\n    private setupStats(): void {\r\n        this.stats = {\r\n            score: 0,\r\n            moves: Math.max(0, this.config.maxMoves),\r\n            targetScore: this.config.targetScore,\r\n            maxMoves: this.config.maxMoves,\r\n            shufflesLeft: this.config.shuffleAttempts,\r\n            isGameOver: false,\r\n            isWin: false\r\n        };\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        this.boundOnTileClicked = this.onTileClicked.bind(this);\r\n        this.boundOnTilesBurned = this.onTilesBurned.bind(this);\r\n        this.boundOnGroupBurnedSuccessfully = this.onGroupBurnedSuccessfully.bind(this);\r\n        \r\n        this.eventSystem.on(Events.TILE_CLICKED, this.boundOnTileClicked);\r\n        this.eventSystem.on(Events.TILES_BURNED, this.boundOnTilesBurned);\r\n        this.eventSystem.on(Events.GROUP_BURNED_SUCCESSFULLY, this.boundOnGroupBurnedSuccessfully);\r\n    }\r\n\r\n    private startNewGame(): void {\r\n        this.setGameState(GameState.PLAYING);\r\n        this.eventSystem.emit(Events.UI_UPDATE_REQUESTED, this.stats);\r\n        if (this.tileContainerComponent && this.config) {\r\n            this.tileContainerComponent.initializeContainer(this.config);\r\n        }\r\n    }\r\n\r\n    private setGameState(newState: GameState): void {\r\n        if (this.currentState !== newState) {\r\n            this.currentState = newState;\r\n            this.eventSystem.emit(Events.GAME_STATE_CHANGED, newState);\r\n        }\r\n    }\r\n\r\n    private onTileClicked(data?: Position): void {\r\n        if (!data) return;\r\n        const position = data;\r\n        if (this.currentState !== GameState.PLAYING) return;\r\n        \r\n        if (this.stats.moves <= 0) {\r\n            return;\r\n        }   \r\n    }\r\n\r\n    private onTilesBurned(data?: Position[]): void {\r\n        if (!data) return;\r\n        const burnedTiles = data;\r\n        const points = burnedTiles.length * 10;\r\n        this.stats.score += points;\r\n        this.eventSystem.emit(Events.SCORE_CHANGED, this.stats.score);\r\n        this.checkGameEnd();\r\n    }\r\n\r\n    private onGroupBurnedSuccessfully(data?: void): void {\r\n        this.stats.moves = Math.max(0, this.stats.moves - 1);\r\n        this.eventSystem.emit(Events.MOVES_CHANGED, this.stats.moves);\r\n    }\r\n\r\n    private checkGameEnd(): void {\r\n        if (this.stats.score >= this.stats.targetScore && !this.stats.isGameOver) {\r\n            this.endGame(true, 'Целевой счет достигнут!');\r\n        } else if (this.stats.moves <= 0 && !this.stats.isGameOver) {\r\n            this.handleNoMovesLeft();\r\n        }\r\n    }\r\n\r\n    private handleNoMovesLeft(): void {\r\n        if (this.stats.shufflesLeft > 0) {\r\n            this.stats.shufflesLeft--;\r\n            this.stats.moves += 5;\r\n            this.eventSystem.emit(Events.MOVES_CHANGED, this.stats.moves);\r\n            \r\n            this.scheduleOnce(() => {\r\n                this.shuffleField();\r\n            }, 0.5);\r\n        } else {\r\n            this.endGame(false, 'Закончились ходы и попытки перемешивания');\r\n        }\r\n    }\r\n\r\n    private shuffleField(): void {\r\n        if (this.tileContainerComponent) {\r\n            this.tileContainerComponent.shuffleField();\r\n        }\r\n    }\r\n\r\n    private endGame(isWin: boolean, reason: string): void {\r\n        this.stats.isGameOver = true;\r\n        this.stats.isWin = isWin;\r\n        \r\n        if (isWin) {\r\n            this.eventSystem.emit(Events.GAME_WON);\r\n        } else {\r\n            this.eventSystem.emit(Events.GAME_LOST);\r\n        }\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.restartGame();\r\n        }, 3.0);\r\n    }\r\n\r\n    private restartGame(): void {\r\n        this.setupStats();\r\n        if (this.boosterSystem) {\r\n            this.boosterSystem.resetBoosters();\r\n        }\r\n        if (this.tileContainerComponent) {\r\n            this.tileContainerComponent.initializeContainer(this.config);\r\n        }\r\n        this.eventSystem.emit(Events.UI_UPDATE_REQUESTED, this.stats);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.eventSystem.off(Events.TILE_CLICKED, this.boundOnTileClicked);\r\n        this.eventSystem.off(Events.TILES_BURNED, this.boundOnTilesBurned);\r\n        this.eventSystem.off(Events.GROUP_BURNED_SUCCESSFULLY, this.boundOnGroupBurnedSuccessfully);\r\n    }\r\n\r\n    public refreshEntireField(): void {\r\n        if (this.tileContainerComponent) {\r\n            this.tileContainerComponent.refreshEntireField();\r\n        }\r\n    }\r\n\r\n    public getCurrentState(): GameState {\r\n        return this.currentState;\r\n    }\r\n\r\n    public getStats(): GameStats {\r\n        return { ...this.stats };\r\n    }\r\n\r\n    public getConfig(): GameConfig {\r\n        return { ...this.config };\r\n    }\r\n}\r\n","/**\r\n * Состояния игры и основные типы данных\r\n */\r\n\r\nexport enum GameState {\r\n    MENU = \"menu\",\r\n    PLAYING = \"playing\",\r\n    PAUSED = \"paused\",\r\n    GAME_OVER = \"game_over\",\r\n    VICTORY = \"victory\"\r\n}\r\n\r\nexport enum TileType {\r\n    BLUE = \"blue\",\r\n    GREEN = \"green\",\r\n    RED = \"red\", \r\n    YELLOW = \"yellow\",\r\n    PURPLE = \"purple\",\r\n    SUPER_ROW = \"super_row\",\r\n    SUPER_COLUMN = \"super_column\",\r\n    SUPER_BOMB = \"super_bomb\", \r\n    SUPER_BOMB_MAX = \"super_bomb_max\"\r\n}\r\n\r\nexport enum TileState {\r\n    NORMAL = \"normal\",\r\n    BURNING = \"burning\",\r\n    FALLING = \"falling\",\r\n    SPAWNING = \"spawning\"\r\n}\r\n\r\nexport interface GameConfig {\r\n    fieldWidth: number;\r\n    fieldHeight: number;\r\n    targetScore: number;\r\n    maxMoves: number;\r\n    shuffleAttempts: number;\r\n}\r\n\r\nexport interface GameStats {\r\n    score: number;\r\n    moves: number;\r\n    targetScore: number;\r\n    maxMoves: number;\r\n    shufflesLeft: number;\r\n    isGameOver: boolean;\r\n    isWin: boolean;\r\n}\r\n\r\nexport interface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\nimport { EventSystem, Events } from \"../Core/EventSystem\";\r\nimport { GameStats } from \"../Core/GameState\";\r\n\r\n@ccclass\r\nexport class GameUIManager extends cc.Component {\r\n    @property(cc.Label)\r\n    scoreLabel: cc.Label = null!;\r\n\r\n    @property(cc.Label)\r\n    movesLabel: cc.Label = null!;\r\n\r\n    @property(cc.Label)\r\n    winLoseLabel: cc.Label = null!;\r\n\r\n    private eventSystem!: EventSystem;\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n        this.setupEventListeners();\r\n        this.hideWinLoseMessage();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        this.eventSystem.on(Events.SCORE_CHANGED, this.onScoreChanged.bind(this));\r\n        this.eventSystem.on(Events.MOVES_CHANGED, this.onMovesChanged.bind(this));\r\n        this.eventSystem.on(Events.GAME_WON, this.onGameWon.bind(this));\r\n        this.eventSystem.on(Events.GAME_LOST, this.onGameLost.bind(this));\r\n        this.eventSystem.on(Events.UI_UPDATE_REQUESTED, this.onUIUpdateRequested.bind(this));\r\n    }\r\n\r\n    private onScoreChanged(data?: number): void {\r\n        if (data !== undefined) {\r\n            this.updateScoreDisplay(data);\r\n        }\r\n    }\r\n\r\n    private onMovesChanged(data?: number): void {\r\n        if (data !== undefined) {\r\n            this.updateMovesDisplay(data);\r\n        }\r\n    }\r\n\r\n    private onGameWon(): void {\r\n        this.showWinMessage();\r\n    }\r\n\r\n    private onGameLost(): void {\r\n        this.showLoseMessage();\r\n    }\r\n\r\n    private onUIUpdateRequested(data?: GameStats): void {\r\n        if (data) {\r\n            this.updateScoreDisplay(data.score);\r\n            this.updateMovesDisplay(data.moves);\r\n            this.hideWinLoseMessage();\r\n        }\r\n    }\r\n\r\n    private updateScoreDisplay(score: number): void {\r\n        if (this.scoreLabel) {\r\n            this.scoreLabel.string = `ОЧКИ:\\n${score}/1500`;\r\n        }\r\n    }\r\n\r\n    private updateMovesDisplay(moves: number): void {\r\n        if (this.movesLabel) {\r\n            this.movesLabel.string = moves.toString();\r\n        }\r\n    }\r\n\r\n    private showWinMessage(): void {\r\n        if (this.winLoseLabel) {\r\n            this.winLoseLabel.string = \"ПОБЕДА!\";\r\n            this.winLoseLabel.node.color = cc.Color.GREEN;\r\n            this.animateWinLoseMessage();\r\n        }\r\n    }\r\n\r\n    private showLoseMessage(): void {\r\n        if (this.winLoseLabel) {\r\n            this.winLoseLabel.string = \"ПОРАЖЕНИЕ\";\r\n            this.winLoseLabel.node.color = cc.Color.RED;\r\n            this.animateWinLoseMessage();\r\n        }\r\n    }\r\n\r\n    private animateWinLoseMessage(): void {\r\n        if (this.winLoseLabel) {\r\n            this.winLoseLabel.node.active = true;\r\n            this.winLoseLabel.node.scale = 0;\r\n            const tween = cc.tween(this.winLoseLabel.node)\r\n                .to(0.5, { scale: 1.0 })\r\n                .start();\r\n            \r\n            const stopTween = () => {\r\n                if (tween) {\r\n                    tween.stop();\r\n                }\r\n            };\r\n            \r\n            this.winLoseLabel.node.on('destroy', stopTween);\r\n            this.winLoseLabel.node.on('remove', stopTween);\r\n        }\r\n    }\r\n\r\n    public hideWinLoseMessage(): void {\r\n        if (this.winLoseLabel) {\r\n            this.winLoseLabel.node.active = false;\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        this.eventSystem.off(Events.SCORE_CHANGED, this.onScoreChanged.bind(this));\r\n        this.eventSystem.off(Events.MOVES_CHANGED, this.onMovesChanged.bind(this));\r\n        this.eventSystem.off(Events.GAME_WON, this.onGameWon.bind(this));\r\n        this.eventSystem.off(Events.GAME_LOST, this.onGameLost.bind(this));\r\n        this.eventSystem.off(Events.UI_UPDATE_REQUESTED, this.onUIUpdateRequested.bind(this));\r\n    }\r\n}\r\n","import { Position } from \"../Core/GameState\";\r\n\r\nexport class PositionUtils {\r\n    private static readonly FIELD_WIDTH = 8;\r\n    private static readonly FIELD_HEIGHT = 8;\r\n\r\n    public static isValidPosition(position: Position): boolean {\r\n        return position.x >= 0 && position.x < this.FIELD_WIDTH &&\r\n               position.y >= 0 && position.y < this.FIELD_HEIGHT;\r\n    }\r\n\r\n    public static isValidPositionXY(x: number, y: number): boolean {\r\n        return x >= 0 && x < this.FIELD_WIDTH && y >= 0 && y < this.FIELD_HEIGHT;\r\n    }\r\n\r\n    public static arePositionsEqual(pos1: Position, pos2: Position): boolean {\r\n        return pos1.x === pos2.x && pos1.y === pos2.y;\r\n    }\r\n\r\n    public static getDistance(pos1: Position, pos2: Position): number {\r\n        const dx = pos1.x - pos2.x;\r\n        const dy = pos1.y - pos2.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n}\r\n","import { Position } from \"../Core/GameState\";\r\nimport { PositionUtils } from \"./PositionUtils\";\r\n\r\nexport class TileAreaUtils {\r\n    public static getTilesInRadius(center: Position, radius: number): Position[] {\r\n        const tiles: Position[] = [];\r\n        \r\n        for (let y = center.y - radius; y <= center.y + radius; y++) {\r\n            for (let x = center.x - radius; x <= center.x + radius; x++) {\r\n                if (PositionUtils.isValidPositionXY(x, y)) {\r\n                    tiles.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n        \r\n        return tiles;\r\n    }\r\n\r\n    public static getTilesInRow(row: number): Position[] {\r\n        const tiles: Position[] = [];\r\n        for (let x = 0; x < 8; x++) {\r\n            tiles.push({ x, y: row });\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    public static getTilesInColumn(column: number): Position[] {\r\n        const tiles: Position[] = [];\r\n        for (let y = 0; y < 8; y++) {\r\n            tiles.push({ x: column, y });\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    public static mergeTilePositions(tiles1: Position[], tiles2: Position[]): Position[] {\r\n        const merged = [...tiles1];\r\n        const existingPositions = new Set(tiles1.map(tile => `${tile.x},${tile.y}`));\r\n        \r\n        for (const tile of tiles2) {\r\n            const key = `${tile.x},${tile.y}`;\r\n            if (!existingPositions.has(key)) {\r\n                merged.push(tile);\r\n                existingPositions.add(key);\r\n            }\r\n        }\r\n        \r\n        return merged;\r\n    }\r\n\r\n    public static containsPosition(positions: Position[], target: Position): boolean {\r\n        return positions.some(pos => PositionUtils.arePositionsEqual(pos, target));\r\n    }\r\n}\r\n","/**\r\n * Контейнер для управления тайлами на игровом поле\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nimport { GameConfig, Position, TileState, TileType } from \"../Core/GameState\";\r\nimport { TileFactory } from \"../Tiles/TileFactory\";\r\nimport { Tile } from \"../Tiles/Tile\";\r\nimport { TileConfig } from \"../Tiles/TileTypes\";\r\nimport { EventSystem, Events } from \"../Core/EventSystem\";\r\nimport { BoosterSystem } from \"../Boosters/BoosterSystem\";\r\nimport { PositionUtils } from \"../Utils/PositionUtils\";\r\nimport { TileAreaUtils } from \"../Utils/TileAreaUtils\";\r\nimport { WorldPositionUtils } from \"../Utils/WorldPositionUtils\";\r\n\r\n@ccclass\r\nexport class TileContainer extends cc.Component {\r\n    @property(cc.Prefab)\r\n    tilePrefab: cc.Prefab = null!;\r\n\r\n    @property(BoosterSystem)\r\n    boosterSystem: BoosterSystem = null!;\r\n\r\n    private config!: GameConfig;\r\n    private tiles: Tile[][] = [];\r\n    private eventSystem!: EventSystem;\r\n    private wasSuperTileActivation: boolean = false;\r\n    \r\n    private boundOnTileClicked!: (data?: Position) => void;\r\n    private boundOnBombExecute!: (data?: { positions?: Position[]; center?: Position }) => void;\r\n    private boundOnTeleportExecute!: (data?: { position1?: Position; position2?: Position }) => void;\r\n    private boundOnTilesDestroyed!: (data?: Position[]) => void;\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        this.boundOnTileClicked = this.onTileClicked.bind(this);\r\n        this.boundOnBombExecute = this.onBombExecute.bind(this);\r\n        this.boundOnTeleportExecute = this.onTeleportExecute.bind(this);\r\n        this.boundOnTilesDestroyed = this.onTilesDestroyed.bind(this);\r\n        \r\n        this.eventSystem.on(Events.TILE_CLICKED, this.boundOnTileClicked);\r\n        this.eventSystem.on(Events.BOOSTER_BOMB_EXECUTE, this.boundOnBombExecute);\r\n        this.eventSystem.on(Events.BOOSTER_TELEPORT_EXECUTE, this.boundOnTeleportExecute);\r\n        this.eventSystem.on(Events.TILES_DESTROYED, this.boundOnTilesDestroyed);\r\n    }\r\n\r\n    public initializeContainer(config: GameConfig): void {\r\n        this.config = config;\r\n        \r\n        this.clearAllTiles();\r\n        \r\n        this.createTileGrid();\r\n        this.generateInitialTiles();\r\n    }\r\n\r\n    private clearAllTiles(): void {\r\n        this.node.removeAllChildren();\r\n        \r\n        if (this.tiles) {\r\n            for (let x = 0; x < this.tiles.length; x++) {\r\n                for (let y = 0; y < this.tiles[x].length; y++) {\r\n                    if (this.tiles[x][y]) {\r\n                        this.tiles[x][y].destroyTile();\r\n                        this.tiles[x][y] = null!;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.tiles = [];\r\n    }\r\n\r\n    public refreshEntireField(): void {\r\n        this.clearAllTiles();\r\n        \r\n        this.createTileGrid();\r\n        this.generateInitialTiles();\r\n    }\r\n\r\n    public shuffleField(): void {\r\n        this.clearAllTiles();\r\n        \r\n        this.createTileGrid();\r\n        this.generateInitialTiles();\r\n    }\r\n\r\n    private createTileGrid(): void {\r\n        this.tiles = [];\r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            this.tiles[x] = [];\r\n            for (let y = 0; y < this.config.fieldHeight; y++) {\r\n                this.tiles[x][y] = null!;\r\n            }\r\n        }\r\n    }\r\n\r\n    private generateInitialTiles(): void {\r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            for (let y = 0; y < this.config.fieldHeight; y++) {\r\n                this.createTileAt({ x, y });\r\n            }\r\n        }\r\n    }\r\n\r\n    private createTileAt(position: Position): void {\r\n        if (!this.tilePrefab) {\r\n            return;\r\n        }\r\n\r\n        const tileConfig = TileFactory.createRandomTile(position);\r\n        const tileNode = cc.instantiate(this.tilePrefab);\r\n        const tileComponent = tileNode.getComponent(Tile);\r\n        \r\n        if (tileComponent) {\r\n            tileComponent.initialize(tileConfig);\r\n            this.tiles[position.x][position.y] = tileComponent;\r\n        }\r\n\r\n        if (this.node) {\r\n            tileNode.setParent(this.node);\r\n            const worldPos = this.getWorldPosition(position);\r\n            tileNode.setPosition(worldPos);\r\n        }\r\n    }\r\n\r\n    private getWorldPosition(position: Position): cc.Vec2 {\r\n        return WorldPositionUtils.getWorldPosition(position);\r\n    }\r\n\r\n    private onTileClicked(data?: Position): void {\r\n        if (!data) return;\r\n        const position = data;\r\n        const tile = this.getTileAt(position);\r\n        if (!tile) {\r\n            return;\r\n        }\r\n\r\n        if (!tile.canBeClicked()) {\r\n            return;\r\n        }\r\n\r\n        if (this.boosterSystem && this.boosterSystem.isBoosterActive()) {\r\n            return;\r\n        }\r\n\r\n        if (this.isSuperTile(tile)) {\r\n            this.activateSuperTile(tile, position);\r\n            return;\r\n        }\r\n\r\n        this.findAndBurnGroup(position);\r\n    }\r\n\r\n    private getTileAt(position: Position): Tile | null {\r\n        if (this.isValidPosition(position) && this.tiles[position.x]) {\r\n            return this.tiles[position.x][position.y];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isValidPosition(position: Position): boolean {\r\n        return PositionUtils.isValidPosition(position);\r\n    }\r\n\r\n    private isValidPositionXY(x: number, y: number): boolean {\r\n        return PositionUtils.isValidPositionXY(x, y);\r\n    }\r\n\r\n    private findAndBurnGroup(position: Position): void {\r\n        const clickedTile = this.getTileAt(position);\r\n        if (!clickedTile) return;\r\n\r\n        const group = this.findConnectedTiles(position, clickedTile.type);\r\n        if (group.length >= 2) {\r\n            this.burnTiles(group);\r\n            this.eventSystem.emit(Events.GROUP_BURNED_SUCCESSFULLY);\r\n        }\r\n    }\r\n\r\n    private findConnectedTiles(startPosition: Position, tileType: string): Position[] {\r\n        const visited: boolean[][] = [];\r\n        const result: Position[] = [];\r\n        \r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            visited[x] = [];\r\n            for (let y = 0; y < this.config.fieldHeight; y++) {\r\n                visited[x][y] = false;\r\n            }\r\n        }\r\n\r\n        this.floodFill(startPosition, tileType, visited, result);\r\n        return result;\r\n    }\r\n\r\n    private floodFill(position: Position, tileType: string, visited: boolean[][], result: Position[]): void {\r\n        if (!this.isValidPosition(position) || visited[position.x][position.y]) return;\r\n        \r\n        const tile = this.getTileAt(position);\r\n        if (!tile || tile.type !== tileType) return;\r\n\r\n        visited[position.x][position.y] = true;\r\n        result.push(position);\r\n\r\n        const directions = [\r\n            { x: 0, y: 1 }, { x: 0, y: -1 },\r\n            { x: 1, y: 0 }, { x: -1, y: 0 }\r\n        ];\r\n\r\n        for (const dir of directions) {\r\n            const newPos = { x: position.x + dir.x, y: position.y + dir.y };\r\n            this.floodFill(newPos, tileType, visited, result);\r\n        }\r\n    }\r\n\r\n    private burnTiles(positions: Position[]): void {\r\n        this.eventSystem.emit(Events.TILES_BURNED, positions);\r\n    }\r\n\r\n    private onTilesDestroyed(data?: Position[]): void {\r\n        if (!data) return;\r\n        const positions = data;\r\n        this.destroyTilesAfterAnimation(positions);\r\n    }\r\n\r\n    private destroyTilesAfterAnimation(positions: Position[]): void {\r\n        for (const pos of positions) {\r\n            const tile = this.getTileAt(pos);\r\n            if (tile) {\r\n                tile.setState(TileState.BURNING);\r\n                tile.destroyTile();\r\n                this.tiles[pos.x][pos.y] = null!;\r\n            }\r\n        }\r\n        \r\n        if (positions.length >= 4 && !this.wasSuperTileActivation) {\r\n            this.createSuperTile(positions[0], positions.length);\r\n        }\r\n        \r\n        this.wasSuperTileActivation = false;\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.processGravity();\r\n        }, 0.05);\r\n    }\r\n\r\n    private processGravity(): void {\r\n        this.applyGravity();\r\n        \r\n        this.fillEmptySpaces();\r\n    }\r\n\r\n    private applyGravity(): void {\r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            this.processColumn(x);\r\n        }\r\n    }\r\n\r\n    private processColumn(column: number): void {\r\n        const columnTiles: Tile[] = [];\r\n        \r\n        for (let y = this.config.fieldHeight - 1; y >= 0; y--) {\r\n            const tile = this.tiles[column][y];\r\n            if (tile) {\r\n                columnTiles.push(tile);\r\n            }\r\n        }\r\n        \r\n        for (let y = 0; y < this.config.fieldHeight; y++) {\r\n            this.tiles[column][y] = null!;\r\n        }\r\n        \r\n        for (let i = 0; i < columnTiles.length; i++) {\r\n            const newY = this.config.fieldHeight - 1 - i;\r\n            this.tiles[column][newY] = columnTiles[i];\r\n            \r\n            const newPosition = { x: column, y: newY };\r\n            columnTiles[i].position = newPosition;\r\n            \r\n            this.animateTileFall(columnTiles[i], newPosition);\r\n        }\r\n    }\r\n\r\n    private fillEmptySpaces(): void {\r\n        const emptyPositions: Position[] = [];\r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            for (let y = 0; y < this.config.fieldHeight; y++) {\r\n                if (!this.tiles[x][y]) {\r\n                    emptyPositions.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.animateNewTilesCreation(emptyPositions);\r\n        }, 0.1);\r\n    }\r\n\r\n    private animateNewTilesCreation(positions: Position[]): void {\r\n        for (let i = 0; i < positions.length; i++) {\r\n            const pos = positions[i];\r\n            this.createTileAt(pos);\r\n            const tile = this.getTileAt(pos);\r\n            \r\n            if (tile) {\r\n                const targetWorldPos = this.getWorldPosition(pos);\r\n                const startY = targetWorldPos.y + 200;\r\n                tile.node.y = startY;\r\n                \r\n                const tween = cc.tween(tile.node)\r\n                    .to(0.2, { position: cc.v3(targetWorldPos.x, targetWorldPos.y, 0) })\r\n                    .start();\r\n                \r\n                const stopTween = () => {\r\n                    if (tween) {\r\n                        tween.stop();\r\n                    }\r\n                };\r\n                \r\n                tile.node.on('destroy', stopTween);\r\n                tile.node.on('remove', stopTween);\r\n            }\r\n        }\r\n    }\r\n\r\n    private animateTileFall(tile: Tile, newPosition: Position): void {\r\n        const worldPos = this.getWorldPosition(newPosition);\r\n        const tween = cc.tween(tile.node)\r\n            .to(0.15, { position: cc.v3(worldPos.x, worldPos.y, 0) })\r\n            .start();\r\n        \r\n        const stopTween = () => {\r\n            if (tween) {\r\n                tween.stop();\r\n            }\r\n        };\r\n        \r\n        tile.node.on('destroy', stopTween);\r\n        tile.node.on('remove', stopTween);\r\n    }\r\n\r\n    private createSuperTile(position: Position, groupSize: number): void {\r\n        const superTileType = this.getSuperTileType(groupSize);\r\n        if (superTileType === TileType.BLUE) return;\r\n        \r\n        const tileConfig: TileConfig = {\r\n            type: superTileType,\r\n            position: position,\r\n            isSpecial: true,\r\n            specialType: superTileType\r\n        };\r\n        \r\n        const tileNode = cc.instantiate(this.tilePrefab);\r\n        const tileComponent = tileNode.getComponent(Tile);\r\n        \r\n        if (tileComponent) {\r\n            tileComponent.initialize(tileConfig);\r\n            this.tiles[position.x][position.y] = tileComponent;\r\n        }\r\n\r\n        tileNode.setParent(this.node);\r\n        const worldPos = this.getWorldPosition(position);\r\n        tileNode.setPosition(worldPos);\r\n    }\r\n\r\n    private getSuperTileType(groupSize: number): TileType {\r\n        if (groupSize >= 8) {\r\n            return TileType.SUPER_BOMB_MAX;\r\n        } else if (groupSize >= 6) {\r\n            return TileType.SUPER_BOMB;\r\n        } else if (groupSize >= 4) {\r\n            return Math.random() < 0.5 ? TileType.SUPER_ROW : TileType.SUPER_COLUMN;\r\n        }\r\n        return TileType.BLUE;\r\n    }\r\n\r\n    private isSuperTile(tile: Tile): boolean {\r\n        return tile.type === TileType.SUPER_ROW || \r\n               tile.type === TileType.SUPER_COLUMN ||\r\n               tile.type === TileType.SUPER_BOMB ||\r\n               tile.type === TileType.SUPER_BOMB_MAX;\r\n    }\r\n\r\n    private activateSuperTile(tile: Tile, position: Position): void {\r\n        if (tile.state === TileState.BURNING) {\r\n            return;\r\n        }\r\n        \r\n        tile.setState(TileState.BURNING);\r\n        \r\n        this.wasSuperTileActivation = true;\r\n        \r\n        let tilesToDestroy: Position[] = [];\r\n        \r\n        switch (tile.type) {\r\n            case TileType.SUPER_ROW:\r\n                tilesToDestroy = this.getTilesInRow(position.y);\r\n                break;\r\n            case TileType.SUPER_COLUMN:\r\n                tilesToDestroy = this.getTilesInColumn(position.x);\r\n                break;\r\n            case TileType.SUPER_BOMB:\r\n                tilesToDestroy = this.getTilesInRadius(position.x, position.y, 1);\r\n                break;\r\n            case TileType.SUPER_BOMB_MAX:\r\n                const rowTiles = this.getTilesInRow(position.y);\r\n                const columnTiles = this.getTilesInColumn(position.x);\r\n                tilesToDestroy = this.mergeTilePositions(rowTiles, columnTiles);\r\n                break;\r\n        }\r\n        \r\n        if (tilesToDestroy.length > 0) {\r\n            tilesToDestroy.push(position);\r\n            this.burnTiles(tilesToDestroy);\r\n            this.eventSystem.emit(Events.GROUP_BURNED_SUCCESSFULLY);\r\n        }\r\n    }\r\n\r\n\r\n    private getTilesInRow(row: number): Position[] {\r\n        const tiles: Position[] = [];\r\n        for (let x = 0; x < this.config.fieldWidth; x++) {\r\n            if (this.tiles[x][row]) {\r\n                tiles.push({ x, y: row });\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private getTilesInColumn(column: number): Position[] {\r\n        const tiles: Position[] = [];\r\n        for (let y = 0; y < this.config.fieldHeight; y++) {\r\n            if (this.tiles[column][y]) {\r\n                tiles.push({ x: column, y });\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private getTilesInRadius(centerX: number, centerY: number, radius: number): Position[] {\r\n        return TileAreaUtils.getTilesInRadius({ x: centerX, y: centerY }, radius);\r\n    }\r\n\r\n    private mergeTilePositions(tiles1: Position[], tiles2: Position[]): Position[] {\r\n        return TileAreaUtils.mergeTilePositions(tiles1, tiles2);\r\n    }\r\n\r\n    private onBombExecute(data?: { positions?: Position[]; center?: Position }): void {\r\n        if (!data) return;\r\n        if (data.positions && data.positions.length > 0) {\r\n            this.burnTiles(data.positions);\r\n        }\r\n    }\r\n\r\n    private onTeleportExecute(data?: { position1?: Position; position2?: Position }): void {\r\n        if (!data) return;\r\n        if (!data.position1 || !data.position2) {\r\n            return;\r\n        }\r\n        \r\n        this.swapTiles(data.position1, data.position2);\r\n    }\r\n\r\n    private swapTiles(pos1: Position, pos2: Position): void {\r\n        const tile1 = this.getTileAt(pos1);\r\n        const tile2 = this.getTileAt(pos2);\r\n\r\n        if (!tile1 || !tile2) {\r\n            return;\r\n        }\r\n\r\n        const tile1Type = tile1.type;\r\n        const tile2Type = tile2.type;\r\n\r\n        tile1.type = tile2Type;\r\n        tile2.type = tile1Type;\r\n\r\n        if (tile1.updateVisual) {\r\n            tile1.updateVisual();\r\n        }\r\n        if (tile2.updateVisual) {\r\n            tile2.updateVisual();\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        this.eventSystem.off(Events.TILE_CLICKED, this.boundOnTileClicked);\r\n        this.eventSystem.off(Events.BOOSTER_BOMB_EXECUTE, this.boundOnBombExecute);\r\n        this.eventSystem.off(Events.BOOSTER_TELEPORT_EXECUTE, this.boundOnTeleportExecute);\r\n        this.eventSystem.off(Events.TILES_DESTROYED, this.boundOnTilesDestroyed);\r\n        this.unscheduleAllCallbacks();\r\n    }\r\n\r\n}\r\n","/**\r\n * Фабрика для создания тайлов с рандомными типами\r\n */\r\n\r\nimport { TileType, Position } from \"../Core/GameState\";\r\nimport { TileConfig } from \"./TileTypes\";\r\n\r\nexport class TileFactory {\r\n    private static tileTypes: TileType[] = [\r\n        TileType.BLUE,\r\n        TileType.GREEN,\r\n        TileType.RED,\r\n        TileType.YELLOW,\r\n        TileType.PURPLE\r\n    ];\r\n\r\n    public static createRandomTile(position: Position): TileConfig {\r\n        const randomType = this.getRandomTileType();\r\n        return {\r\n            type: randomType,\r\n            position: position,\r\n            isSpecial: false\r\n        };\r\n    }\r\n\r\n    public static createTileOfType(type: TileType, position: Position): TileConfig {\r\n        return {\r\n            type: type,\r\n            position: position,\r\n            isSpecial: false\r\n        };\r\n    }\r\n\r\n    public static getRandomTileType(): TileType {\r\n        const randomIndex = Math.floor(Math.random() * this.tileTypes.length);\r\n        return this.tileTypes[randomIndex];\r\n    }\r\n\r\n    public static getAllTileTypes(): TileType[] {\r\n        return [...this.tileTypes];\r\n    }\r\n}\r\n","/**\r\n * Компонент отдельного тайла с логикой и визуалом\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nimport { TileType, TileState, Position } from \"../Core/GameState\";\r\nimport { ITile, TileConfig } from \"./TileTypes\";\r\nimport { EventSystem, Events } from \"../Core/EventSystem\";\r\n\r\n@ccclass\r\nexport class Tile extends cc.Component implements ITile {\r\n    @property(cc.Sprite)\r\n    sprite: cc.Sprite = null;\r\n\r\n    @property(cc.Button)\r\n    button: cc.Button = null;\r\n\r\n    @property([cc.SpriteFrame])\r\n    tileSprites: cc.SpriteFrame[] = [];\r\n\r\n    public type: TileType;\r\n    public state: TileState = TileState.NORMAL;\r\n    public position: Position;\r\n    public isSpecial: boolean = false;\r\n    public specialType: string = \"\";\r\n\r\n    private eventSystem: EventSystem;\r\n\r\n    onLoad() {\r\n        this.eventSystem = EventSystem.getInstance();\r\n        this.setupButton();\r\n    }\r\n\r\n    private setupButton(): void {\r\n        if (this.button) {\r\n            this.button.node.on(cc.Node.EventType.TOUCH_END, this.onTileClicked, this);\r\n        }\r\n    }\r\n\r\n    public initialize(config: TileConfig): void {\r\n        this.type = config.type;\r\n        this.position = config.position;\r\n        this.isSpecial = config.isSpecial || false;\r\n        this.specialType = config.specialType || \"\";\r\n        this.state = TileState.NORMAL;\r\n        this.node.setContentSize(100, 112);\r\n        if (this.sprite) {\r\n            this.sprite.node.setContentSize(100, 112);\r\n        }\r\n        this.updateVisual();\r\n    }\r\n\r\n    public updateVisual(): void {\r\n        if (this.sprite && this.tileSprites.length > 0) {\r\n            const spriteIndex = this.getSpriteIndex();\r\n            if (spriteIndex >= 0 && spriteIndex < this.tileSprites.length) {\r\n                this.sprite.spriteFrame = this.tileSprites[spriteIndex];\r\n            }\r\n        }\r\n    }\r\n\r\n    private getSpriteIndex(): number {\r\n        const typeMap = {\r\n            [TileType.BLUE]: 0,\r\n            [TileType.GREEN]: 1,\r\n            [TileType.RED]: 2,\r\n            [TileType.YELLOW]: 3,\r\n            [TileType.PURPLE]: 4,\r\n            [TileType.SUPER_BOMB]: 5,\r\n            [TileType.SUPER_BOMB_MAX]: 6,\r\n            [TileType.SUPER_COLUMN]: 7,\r\n            [TileType.SUPER_ROW]: 8\r\n        };\r\n        return typeMap[this.type] || 0;\r\n    }\r\n\r\n    private onTileClicked(): void {\r\n        if (this.state === TileState.NORMAL) {\r\n            this.eventSystem.emit(Events.TILE_CLICKED, this.position);\r\n        }\r\n    }\r\n\r\n    public setState(newState: TileState): void {\r\n        this.state = newState;\r\n        this.updateVisual();\r\n    }\r\n\r\n    public canBeClicked(): boolean {\r\n        return this.state === TileState.NORMAL;\r\n    }\r\n\r\n    public destroyTile(): void {\r\n        this.node.destroy();\r\n    }\r\n}\r\n","import { Position } from \"../Core/GameState\";\r\n\r\nexport class WorldPositionUtils {\r\n    private static readonly TILE_SIZE = 100;\r\n    private static readonly SPACING = 120;\r\n    private static readonly FIELD_WIDTH = 8;\r\n    private static readonly FIELD_HEIGHT = 8;\r\n\r\n    public static getWorldPosition(position: Position): cc.Vec2 {\r\n        const startX = -(this.FIELD_WIDTH - 1) * this.SPACING / 2;\r\n        const startY = (this.FIELD_HEIGHT - 1) * this.SPACING / 2;\r\n        \r\n        return cc.v2(\r\n            startX + position.x * this.SPACING,\r\n            startY - position.y * this.SPACING\r\n        );\r\n    }\r\n\r\n    public static getWorldPositionForField(position: Position): cc.Vec2 {\r\n        const tileSize = 80;\r\n        const startX = -(this.FIELD_WIDTH - 1) * tileSize / 2;\r\n        const startY = (this.FIELD_HEIGHT - 1) * tileSize / 2;\r\n        return cc.v2(\r\n            startX + position.x * tileSize,\r\n            startY - position.y * tileSize\r\n        );\r\n    }\r\n}\r\n"],"file":"index.js"}